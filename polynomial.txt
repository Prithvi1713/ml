import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error

data = pd.read_csv('C:/Users/Admin/Downloads/Telegram Desktop/positions.csv')

X = data[["Level"]].values
y = data["Salary"].values


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


degree = 3

# Create polynomial features
poly = PolynomialFeatures(degree=degree)
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)

# Train the polynomial regression model
model = LinearRegression()
model.fit(X_train_poly, y_train)

# Predict salary for the training and testing sets
y_train_pred = model.predict(X_train_poly)
y_test_pred = model.predict(X_test_poly)

# 1. Plotting the results for training data
plt.scatter(X_train, y_train, color='blue', label='Training Data')
X_plot = np.linspace(X_train.min(), X_train.max(), 100).reshape(-1, 1)
X_plot_poly = poly.transform(X_plot)
plt.plot(X_plot, model.predict(X_plot_poly), color='red', label='Polynomial Regression Curve')
plt.title("Polynomial Regression (Training Data)")
plt.xlabel("Position Level")
plt.ylabel("Salary")
plt.legend()
plt.show()


# 2. Plotting the results for testing data
plt.scatter(X_test, y_test, color='green', label='Testing Data')
plt.plot(X_plot, model.predict(X_plot_poly), color='red', label='Polynomial Regression Curve')
plt.title("Polynomial Regression (Testing Data)")
plt.xlabel("Position Level")
plt.ylabel("Salary")
plt.legend()
plt.show()

# 3. Print the predicted salaries for both training and testing data
print("Predicted Salaries (Training):", y_train_pred)
print("Predicted Salaries (Testing):", y_test_pred)

# 4. Calculate the Mean Squared Error for both training and testing sets
mse_train = mean_squared_error(y_train, y_train_pred)
mse_test = mean_squared_error(y_test, y_test_pred)
print(f"Mean Squared Error (Training): {mse_train}")
print(f"Mean Squared Error (Testing):Â {mse_test}")
